{
  "name": "text-mask-all-legacy",
  "version": "0.4.1",
  "description": "Conforms string to given mask or pattern, and can be hooked up to input element",
  "main": "index.js",
  "scripts": {
    "textMask:publish": "sh publish.sh",
    "website": "node website/server.js",
    "website:build": "webpack --mode production --config website/webpack.buildWebsite.js",
    "test": "npm run loud-lint && npm run core:test && npm run react:test && npm run vanilla:test && npm run vue:test && npm run addons:test",
    "build": "npm run core:build && npm run react:build && npm run vanilla:build && npm run vue:build && npm run website:build && npm run addons:build",
    "verify": "npm run core:verify && npm run react:verify && npm run vanilla:verify && npm run vue:verify && npm run addons:verify",
    "core:build": "webpack --mode production --config core/webpack.buildCore.js",
    "core:test": "mocha --require @babel/register core/test --require ./common/domSetup.js --recursive",
    "core:tdd": "npm run core:test -- --watch",
    "core:verify": "npm run core:test -- --verify",
    "core:publish": "sh core/publish.sh",
    "addons:build": "webpack --mode production --config addons/webpack.buildAddons.js",
    "addons:test": "mocha --require @babel/register addons/test --require ./common/domSetup.js --recursive",
    "addons:tdd": "npm run addons:test -- --watch",
    "addons:verify": "npm run addons:test -- --verify",
    "addons:publish": "sh addons/publish.sh",
    "react:test": "mocha --require @babel/register react/test --require ./common/domSetup.js --recursive",
    "react:tdd": "npm run react:test -- --watch",
    "react:verify": "npm run react:test -- --verify",
    "react:watch": "webpack --mode development --config react/webpack.buildReactIntegration.js",
    "react:dev": "node react/example/server.js",
    "react:build": "webpack --mode production --config react/webpack.buildReactIntegration.js",
    "react:publish": "sh react/publish.sh",
    "vanilla:dev": "webpack-dev-server --content-base vanilla/example --port 3000 --config vanilla/example/webpack.runVanillaExample.js",
    "vanilla:test": "mocha --require @babel/register vanilla/test --require ./common/domSetup.js --recursive",
    "vanilla:tdd": "npm run vanilla:test -- --watch",
    "vanilla:verify": "npm run vanilla:test -- --verify",
    "vanilla:build": "webpack --mode production --config vanilla/webpack.buildVanillaIntegration.js",
    "vanilla:publish": "sh vanilla/publish.sh",
    "angular1:dev": "webpack-dev-server --content-base angular1/example --port 3000 --config angular1/example/webpack.runAngular1Example.js",
    "angular1:build": "webpack --mode production --config angular1/webpack.buildAngular1Integration.js",
    "angular1:publish": "sh angular1/publish.sh",
    "angular2:ci": "cd angular2 && npm i && npm run ci",
    "angular2:publish": "sh angular2/publish.sh",
    "ember:dev": "cd ember && ember server",
    "ember:test": "npm install && cd ember && npm install && ember test",
    "ember:publish": "sh ember/publish.sh",
    "vue:build": "webpack --mode production --config vue/webpack.buildVueDirective.js",
    "vue:publish": "sh vue/publish.sh",
    "vue:dev": "webpack-dev-server --content-base vue/example --port 3000 --config vue/example/webpack.runVueExample.js",
    "vue:test": "mocha --require @babel/register vue/test --require ./common/domSetup.js --recursive",
    "vue:tdd": "npm run vue:test -- --watch",
    "vue:verify": "npm run vue:test -- --verify",
    "git:done": "git checkout gh-pages && git rebase master && git checkout master && git push origin master --tags && git push origin gh-pages",
    "ci": "npm i && npm run test && npm run build && npm run verify",
    "loud-lint": "eslint . --ext .js --ext .jsx",
    "lint": "eslint . --ext .js --ext .jsx --fix || true"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Gruven/text-mask.git"
  },
  "author": "M.K. Safi <msafi@msafi.com>",
  "license": "Unlicense",
  "bugs": {
    "url": "https://github.com/Gruven/text-mask/issues"
  },
  "homepage": "https://github.com/Gruven/text-mask#readme",
  "greenkeeper": {
    "ignore": [
      "awesome-typescript-loader",
      "ts-node"
    ]
  },
  "devDependencies": {
    "@babel/cli": "^7.8.3",
    "@babel/core": "^7.8.3",
    "@babel/plugin-proposal-class-properties": "^7.8.3",
    "@babel/plugin-proposal-nullish-coalescing-operator": "^7.8.3",
    "@babel/plugin-proposal-object-rest-spread": "^7.8.3",
    "@babel/plugin-proposal-optional-chaining": "^7.8.3",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/plugin-transform-object-assign": "^7.14.5",
    "@babel/plugin-transform-runtime": "^7.8.3",
    "@babel/preset-env": "^7.8.3",
    "@babel/preset-react": "^7.8.3",
    "@babel/register": "^7.15.3",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.1",
    "angular": "^1.8.2",
    "babel-loader": "^8.2.3",
    "babel-plugin-rewire": "^1.2.0",
    "bootstrap": "^3.4.1",
    "bootstrap3-sass": "^3.4.4",
    "chai": "^4.3.4",
    "classnames": "^2.3.1",
    "core-js": "^3.19.0",
    "create-react-class": "^15.7.0",
    "css-loader": "^6.4.0",
    "enzyme": "^3.11.0",
    "eslint": "^7.32.0",
    "eslint-config-standard": "^16.0.3",
    "eslint-plugin-import": "^2.25.2",
    "eslint-plugin-mocha": "^9.0.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^5.1.1",
    "eslint-plugin-react": "^7.26.1",
    "file-loader": "^6.2.0",
    "jsdom": "^18.0.0",
    "lodash": "^4.0.0",
    "mocha": "^9.1.3",
    "mocha-dynamic-tests": "^2.0.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-hot-loader": "^4.13.0",
    "react-redux": "^7.2.5",
    "react-refresh": "^0.10.0",
    "redux": "^4.1.1",
    "redux-actions": "^2.6.5",
    "sass": "^1.43.3",
    "sass-loader": "^12.2.0",
    "sinon": "^11.1.2",
    "style-loader": "^3.3.1",
    "url-loader": "^4.1.1",
    "vue": "^2.6.14",
    "vue-loader": "^15.9.8",
    "webpack": "^5.60.0",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.3.1"
  },
  "keywords": [
    "text mask",
    "input mask",
    "string mask",
    "input formatting",
    "text formatting",
    "string formatting"
  ]
}
